package com.along101.contract.codegen;

import com.along101.contract.entity.ProtoFileEntity;
import com.along101.contract.entity.ProtoFileEntity;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;
import com.squareup.wire.schema.Location;
import com.squareup.wire.schema.internal.parser.OptionElement;
import com.squareup.wire.schema.internal.parser.ProtoFileElement;
import com.squareup.wire.schema.internal.parser.ProtoParser;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

/**
 * @author zhangchengxi
 * Date 2018/5/7
 */
public class CodegenUtils {

    public static String readContentFromMultipartFile(MultipartFile multipartFile) {
        java.util.Scanner s = null;
        try {
            s = new java.util.Scanner(multipartFile.getInputStream()).useDelimiter("\\A");
        } catch (IOException ignore) {
            return "";
        }
        return s.hasNext() ? s.next() : "";
    }

    /**
     * @param fileName 上传文件的文件名
     * @param data     上传的文件
     * @return
     */
    public static ProtoFileEntity appendProtoFile(String fileName, String data) {
        ProtoFileElement parsed = ProtoParser.parse(Location.get(fileName), data);
        String packageName = parsed.packageName();
        Optional<OptionElement> appIdOption = parsed.options().stream().filter(optionElement -> "appId".equals(optionElement.name())).findFirst();
        Optional<OptionElement> summaryOption = parsed.options().stream().filter(optionElement -> "summary".equals(optionElement.name())).findFirst();
        ProtoFileEntity protoFileEntity = new ProtoFileEntity();
        appIdOption.ifPresent(option -> protoFileEntity.setAppid(option.value().toString()));
        summaryOption.ifPresent(option -> protoFileEntity.setSummary(option.value().toString()));
        protoFileEntity.setContent(data);
        protoFileEntity.setPackageName(packageName);
        protoFileEntity.setName(fileName);

        return protoFileEntity;

    }

    public static Location getLocation(String packageName, String name) {
        String path = packageName.replace(".", "/") + "/" + name;
        return Location.get(path);
    }

    /**
     * outputStream 必须在外部关闭
     *
     * @param javaTypeName
     * @param typeSpec
     * @param location
     * @param outputStream
     * @throws IOException
     */
    public static void writeJavaFile(ClassName javaTypeName, TypeSpec typeSpec, Location location, ZipOutputStream outputStream)
            throws IOException {
        JavaFile.Builder builder = JavaFile.builder(javaTypeName.packageName(), typeSpec)
                .addFileComment("$L", "Code generated by Wire protocol buffer compiler, do not edit.");
        if (location != null) {
            builder.addFileComment("\nSource file: $L", location);
        }
        JavaFile javaFile = builder.build();
        try {
            String path = javaTypeName.reflectionName().replace(".", "/") + ".java";
            outputStream.putNextEntry(new ZipEntry(path));
            outputStream.write(javaFile.toString().getBytes(StandardCharsets.UTF_8));
        } catch (IOException e) {
            throw new IOException("Failed to write " + javaFile.packageName + "."
                    + javaFile.typeSpec.name + " to " + location.path(), e);
        }
    }


}
